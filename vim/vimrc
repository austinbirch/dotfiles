set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Bundles

" Manage vundle (required)
Bundle 'gmarik/vundle'

" colorschemes
Bundle 'altercation/vim-colors-solarized'
Bundle 'sjl/badwolf'
Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim'}

" git help
Bundle 'sjl/splice.vim'
Bundle 'tpope/vim-fugitive'

" file navigation
Bundle 'kien/ctrlp.vim'

" file searching
Bundle 'mileszs/ack.vim'

" text navigation/editing
Bundle 'tpope/vim-surround'
Bundle 'scrooloose/nerdcommenter'
"Bundle 'Townk/vim-autoclose'
Bundle 'Raimondi/delimitMate'

" language generic
Bundle 'scrooloose/syntastic'

" language specific
Bundle 'kchmck/vim-coffee-script'
Bundle 'wavded/vim-stylus'
Bundle 'nono/vim-handlebars'
Bundle 'groenewege/vim-less'
"Bundle 'wookiehangover/jshint.vim'
Bundle 'jtratner/vim-flavored-markdown'

" php
Bundle 'StanAngeloff/php.vim'
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-easytags'
" look in gui_running for debugger include

" nicer status bar
Bundle 'Lokaltog/vim-powerline'

filetype plugin indent on

if has("gui_running")
	" only load PHP debugger on gui
	Bundle 'joonty/vdebug'
	let g:vdebug_options = {}
	let g:vdebug_options['break_on_open'] = 0
	let g:vdebug_options['path_maps'] = {'/home/vagrant/Akkroo': '/Users/austin/Development/Akkroo/Akkroo'}
	
  set guioptions=-t " no toolbar
  "set fullscreen " big please
  "colorscheme badwolf
	"set background=dark
	colorscheme solarized
	"colorscheme Tomorrow-Night
	
	let g:solarized_italic=0
else
  set t_Co=256
  let g:solarized_termcolors=256
  let g:solarized_termtrans=1
  "set background=dark
  colorscheme solarized
endif

set modelines=0 " we don't want this. See :h modelines

syntax enable " we want syntax higlighting

" old tab settings (spaces)
"set expandtab " use spaces for tabs
"set tabstop=2 " tabs are 2 spaces
"set shiftwidth=2 " 2 spaces for autoindent etc
"set autoindent " try and guess the indent level
"set smartindent " probably better for me than cindent

set smartindent
set noexpandtab
set tabstop=2
set shiftwidth=2

" use spaces for indentation with YAML"
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" show tabs
set list
"set listchars=tab:▸\ ,eol:¬,trail:.
set listchars=tab:▸\ ,eol:¬
highlight SpecialKey guifg=grey90 ctermfg=LightGray guibg=NONE
highlight NonText guifg=grey90 ctermfg=LightGray guibg=NONE


" toggle tabs if we want to
nmap <leader>l :set list!<CR>

set scrolloff=5 " show five lines extra at bottom and top

" code folding
"set foldmethod=syntax
"set foldnestmax=1

" expand indentation when CR
let delimitMate_expand_cr = 1

set hidden " allow modified buffers to not be in a window
set showmode " show which mode we are in

set wildmenu " bettercommand line filename completion
set wildmode=list:longest " wild menu options
set wildignore+=.hg,.git,.svn,build,.sass-cache,.DS_Store "
"set wildignore+=*.DS_store " OS X ergh

set textwidth=80 " 80 character limit
set wrap " wrap please
set formatoptions=qrn1
set colorcolumn=+1 " highlight the 81st column

set splitright " vertical split to the right
set splitbelow " horizonal splits open below

set visualbell " less annoying bell
set cursorline " higlight the line the cursor is resting on
set ttyfast " we are using a fast terminal connection (probably!)
set ruler " show line number, cursor position, and file position
set backspace=indent,eol,start " more normal backspace handling
set laststatus=2 " always show a status line
set number " show line numbers
set undofile  " persistant undo
set history=1000 " lots of command history
set undolevels=1000 " lots of undo history
set encoding=utf-8 " vim text display encoding (?)
"set spell " show spelling errors

let g:Powerline_symbols = 'fancy'
set guifont=Menlo\ Regular\ for\ Powerline:h11

let mapleader = "," " our leader key
"let maplocalleader = "\\" " localleader

" search settings
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> &
noremap H ^
noremap L g_

" whitespace handling
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" disable for now
"autocmd BufWritePre *.py,*.js,*.rb,*.coffee :call <SID>StripTrailingWhitespaces()

" shell command so we can get output
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

" use github flavour markdown by default
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

"highlight ExtraWhitespace ctermbg=red guibg=DarkRed
"match ExtraWhitespace /\s\+$/

" Highlight trailing whitespace in vim on non empty lines, but not while
" typing in insert mode!
highlight ExtraWhitespace ctermbg=Brown guibg=RosyBrown
au ColorScheme * highlight ExtraWhitespace guibg=RosyBrown
au BufEnter * match ExtraWhitespace /\S\zs\s\+$/
au InsertEnter * match ExtraWhitespace /\S\zs\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\S\zs\s\+$/

let g:ctrlp_working_path_mode = 2
let g:ctrlp_map = '<leader>t'
let g:ctrlp_switch_buffer = 'etvh' " switch to buffer if it is open
let g:ctrlp_cache_dir = '~/.vim/tmp'
" uses git to list files
"let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']
"let g:ctrlp_custom_ignore = {
  "\ 'dir':  '\v\.(git|hg|svn)',
  "\ 'file': '\v\.(exe|so|dll)$',
  "\ 'link': 'some_bad_symbolic_links',
  "\ }

let g:ctrlp_working_path_mode = 0
"let g:ctrlp_user_command = 'find %s -follow -type f'
let g:ctrlp_user_command = "find %s -follow -type f | grep -vE 'node_modules|.git|.sass-cache|build/|.DS_Store'"

" syntax checking and linting
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1

" temporary file handling
set undodir=~/.vim/tmp/
set backupdir=~/.vim/tmp/
set directory=~/.vim/tmp/
set backup
