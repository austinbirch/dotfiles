;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           (:lt.objs.app/run-on-init :window.fullscreen)]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              :lt.plugins.vim/activate-vim
              :lt.objs.editor/scroll-past-end
              :lt.objs.editor/line-numbers
              (:lt.objs.style/font-settings "Inconsolata-g" 10)
              :lt.objs.editor.file/remove-trailing-whitespace
              :lt.objs.editor.file/last-char-newline
              (:lt.objs.editor/tab-settings false 2 2)
              :editor.keys.hinting.active {"enter" [:passthrough]}]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]
     :editor.html [(:lt.objs.editor/tab-settings false 2 2)]}

 :- {:app [:lt.objs.intro/show-intro]

     :editor [:lt.plugins.auto-complete/textual-hints]}}

